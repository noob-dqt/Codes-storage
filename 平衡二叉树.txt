平衡二叉树的建立：
#include<bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    int high;
    struct node *lt, *rt;
};
typedef struct node* tree;

///深度
int deep(tree root)
{
    if(root==NULL)
        return -1;
    else return root->high;
}

tree LL(tree root)
{
    tree p=root->lt;
    root->lt=p->rt;
    p->rt=root;
    root->high=max(deep(root->lt), deep(root->rt))+1;
    return p;
}

tree RR(tree root)
{
    tree p=root->rt;
    root->rt=p->lt;
    p->lt=root;
    root->high=max(deep(root->lt), deep(root->rt))+1;
    return p;
}

tree RL(tree root)
{
    root->rt=LL(root->rt);
    root=RR(root);
    return root;
}

tree LR(tree root)
{
    root->lt=RR(root->lt);
    root=LL(root);
    return root;
}

tree Insert(tree root, int num)
{
    if(!root)
    {
        root=new node;
        root->data=num;
        root->high=0;
        root->lt=NULL;
        root->rt=NULL;
    }
    else
    {
        if(num<root->data)
        {
            root->lt=Insert(root->lt, num);///加到左子树上
            if(abs(deep(root->lt)-deep(root->rt))>1)
            {
               if(num>=root->lt->data)///比左子根大，LR
                {
                    root=LR(root);
                }
                else ///比左子根小,LL
                {
                    root=LL(root);
                }
            }

        }
        else
        {
            root->rt=Insert(root->rt, num);//加到右子树上
            if(abs(deep(root->lt)-deep(root->rt))>1)
            {
                if(num>=root->rt->data)
                {
                    root=RR(root);
                }
                else
                {
                    root=RL(root);
                }
            }
        }
    }
    root->high=max(deep(root->lt), deep(root->rt))+1;
    return root;
}
int search(tree root,int b){	//查找
    if(root==NULL) return 0;
    if(b==root->data)
    return 1;
    else if(b>root->data)
    return search(root->rt,b);
    else
    return search(root->lt,b);
}
int main()
{
    tree root=NULL;
    int n,num;
    cin>>n;
    while(n--)
    {
        cin>>num;
        root=Insert(root, num);
    }
	cout<<root->data;
    return 0;
}