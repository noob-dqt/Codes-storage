加法：
vector<int> add(vector<int>a,vector<int>b){
    reverse(a.begin(),a.end());
    reverse(b.begin(),b.end());
    int n=a.size();
    int m=b.size();
    if(n<m){
        swap(n,m);
        swap(a,b);
    }
    int i=0,j=0,carr=0;
    vector<int>res;
    while (i<n&&j<m)
    {
        int sum=a[i++]+b[j++]+carr;
        res.push_back(sum%10);
        carr=sum/10;
    }
    while (i<n)
    {
        int sum=a[i++]+carr;
        res.push_back(sum%10);
        carr=sum/10;
    }
    if(carr) res.push_back(carr);
    reverse(res.begin(),res.end());
    return res;
}
减法：此处给出减法结果大于0的情况，针对于普通情况需要先判断数的大小决定正负号，
再将绝对值大的减掉绝对值小的数即可
//判断
bool jg(string a,string b){
    if(a.size()==b.size()) return a>=b;
    return a.size()>b.size();
}
//

vector<int>sub(vector<int>a,vector<int>b){  //a-b且a>b
    vector<int>res;
    reverse(a.begin(),a.end());
    reverse(b.begin(),b.end());
    int n=a.size(),m=b.size();
    int i=0,car=0;
    while (i<n&&i<m)
    {
        a[i]-=car;
        car=0;
        if(a[i]>=b[i]) res.push_back(a[i]-b[i]);
        else{
            a[i]+=10;
            car++;
            res.push_back(a[i]-b[i]);
        }
        i++;
    }
    while (i<n)
    {
        a[i]-=car;
        car=0;
        if(a[i]<0){
            a[i]+=10;
            car=1;
            res.push_back(a[i]);
        }
        else res.push_back(a[i]);
        i++;
    }
    while (res.size()&&res.back()==0) res.pop_back();
    if(res.empty()) res.push_back(0);
    reverse(res.begin(),res.end());
    return res;
}

